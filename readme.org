#+TITLE: Ma configuration Emacs
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+STARTUP: overview
#+TAGS: @Desactivated(d)
#+TODO: Activated(a) Desactivated(d)

* Fichier de configuration pr√©coce
  :PROPERTIES:
  :header-args: :tangle ./early-init.el :comments both :padline yes
  :END:
Introduit dans emacs 27, ce fichier [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early-init.el]] est ex√©cut√© avant le
chargement de l'interface et du syst√®me de paquets.
** Activated Suppression des menus
D√©sactiver le startup screen :
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
Enlever les barres de menu et d'outils :
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
#+end_src
** Activated D√©sactivation de package.el
A utiliser uniquement si l'on souhaite utiliser le gestionnaire de
paquet alternatif [[https://github.com/raxod502/straight.el][straigh.el]].
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

** Activated Message /deprecated cl/
Certains packages d√©pendent du packet /cl/ qui est /deprecated/.
https://github.com/kiwanami/emacs-epc/issues/35

#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))
#+end_src

* Fichier de configuration principal
  :PROPERTIES:
  :header-args: :tangle ./init.el :comments both :padline yes
  :END:
** Gestionnaire de paquets

*** Activated Straight.el
#+begin_src emacs-lisp
;; Install straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
             :custom (straight-use-package-by-default t))
#+end_src


*** Desactivated Initialisation et use-package
 Initialisation des d√©p√¥ts d'archives et installation de use-package,
 qui est une macro permettant d'isoler les configurations paquet par
 paquet.
 https://github.com/jwiegley/use-package
#+begin_src emacs-lisp :tangle no
  (package-initialize)
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/")
               '("elpy" . "http://jorgenschaefer.github.io/packages/"))

  (unless (and (fboundp 'package-installed-p)
         (package-installed-p 'use-package))
    (package-initialize)
    (package-refresh-contents)
    (package-install 'use-package))

  ;;(require 'use-package)
  ;;(use-package auto-compile
  ;;  :config (auto-compile-on-load-mode))
  ;;(setq load-prefer-newer t)
#+end_src

** Configurations simples
*** Activated config ShortCut                                  :@Activated:a:

#+begin_src emacs-lisp
 (defun find-config ()
    "Edit readme.org"
    (interactive)
    (find-file "~/.emacs.d/readme.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src
*** Activated reload init                                      :@Activated:a:

#+begin_src emacs-lisp
(defun me/reload-init ()
  "Reload init.el."
  (interactive)
  (message "Reloading init.el...")
  (load user-init-file nil 'nomessage)
  (message "Reloading init.el... done."))
#+end_src
*** Activated Y-or-n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Activated Suppression de la selection
C'est un comportement dont j'ai l'habitude :
#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

*** Activated Pour empecher emacs de polluer
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :config
  (setq
   auto-save-file-name-transforms
   `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file)))
#+end_src

*** Activated Montrer les paires de parenth√®ses
Montrer les paires de parenth√®ses : https://www.emacswiki.org/emacs/ShowParenMode
#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

*** Activated D√©sactivation du curseur hors de la fen√™tre s√©lectionn√©e
D√©sactiver le curseur dans les fenetres non-actives:
#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows 'hollow)
#+end_src

*** Activated Suppression des espaces avant sauvegarde du fichier
Suppression des espaces en fin de fichier avant de sauvegarder :
#+begin_src emacs-lisp
;; Delete trailing whitespace before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** Activated Encodage Utf8 par d√©faut
Tout passer en utf-8
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
#+end_src
*** Activated Unbind de raccourcis chiants

#+begin_src emacs-lisp
;;(unbind-key "C-x C-f") ;; find-file-read-only
;;(unbind-key "C-x C-d") ;; list-directory
(unbind-key "C-z") ;; suspend-frame
(unbind-key "M-o") ;; facemenu-mode
(unbind-key "<mouse-2>") ;; pasting with mouse-wheel click
(unbind-key "<C-wheel-down>") ;; text scale adjust
#+end_src

** Visuals
*** Font
**** Firacode
#+begin_src emacs-lisp :tangle no
(use-package fira-code-mode
  ;; :custom (fira-code-mode-disabled-ligatures '("[]" "#{" "#(" "#_" "#_(" "x")) ;; List of ligatures to turn off
  :hook prog-mode) ;; Enables fira-code-mode automatically for programming major modes
#+end_src

**** Activated Jetbrains
#+begin_src emacs-lisp
;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono-13"))
;;(add-to-list 'default-frame-alist '(line-spacing . 0.2))
(set-frame-font "JetBrains Mono 13" nil t)
  ;;(set-fontset-font t 'unicode "STIXGeneral" nil 'prepend)
#+end_src
**** Activated Ligatures
#+begin_src emacs-lisp
(use-package ligature
  :straight (:host github :repo "mickeynp/ligature.el")
  :defer 1
  :config
  (ligature-set-ligatures 't '("www"))
  (ligature-set-ligatures
   'prog-mode
   '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
     "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
     "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
     "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
     "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
     "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
     "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
     "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
     ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
     "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
     "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
     "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
     "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
     "&="))
  (global-ligature-mode t))
#+end_src

*** Theme
  Le site https://peach-melpa.org/ propose une galerie des themes
  Emacs disponibles sur MELPA.
**** Activated Doom
Alternatives :

- doom-material :: cool
- doom-tomorrow-night :: ok
- doom-palenight :: cool
- doom-nord :: trop fade
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-material t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

#+end_src


**** Desactivated Nano emacs

https://github.com/rougier/nano-emacs

#+begin_src emacs-lisp :tangle no
  (straight-use-package
   '(nano-emacs :type git :host github :repo "rougier/nano-emacs"))
  (require 'nano-faces)
  (nano-faces)
#+end_src
*** Modeline
**** Activated Doom
     [[https://github.com/seagle0128/doom-modeline][Doom modeline]]
#+begin_src emacs-lisp
(use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src

**** Desactivated √âpurer la /modeline/
#+begin_src emacs-lisp :tangle no
(use-package diminish
  :config (diminish 'eldoc-mode))
#+end_src

*** Icons
**** Activated All-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))
#+end_src

*** Pretty symbols
**** Desactivated Global prettify
#+begin_src emacs-lisp :tangle no
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (global-prettify-symbols-mode 1)
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "‚Ä†")
                                       ("#+END_SRC" . "‚Ä†")
                                       ("#+begin_src" . "‚Ä†")
                                       ("#+end_src" . "‚Ä†")
                                       (">=" . "‚â•")
                                       ("=>" . "‚á®")
                                       ("def" . "ùíá")
                                       ("class" . "ùë™")
                                       ("and" . "‚àß")
                                       ("or" . "‚à®")
                                       ("not" . "Ôø¢")
                                       ("in" . "‚àà")
                                       ("not in" . "‚àâ")
                                       ("return" . "‚üº")
                                       ("yield" . "‚üª")
                                       ("for" . "‚àÄ")
                                       ("!=" . "‚â†")
                                       ("==" . "Ôºù")
                                       (">=" . "‚â•")
                                       ("<=" . "‚â§")))


  (add-hook 'org-mode-hook 'prettify-symbols-mode)
  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(("def" . "ùíá")
             ("class" . "ùë™")
             ("and" . "‚àß")
             ("or" . "‚à®")
             ("not" . "Ôø¢")
             ("in" . "‚àà")
             ("not in" . "‚àâ")
             ("return" . "‚üº")
             ("yield" . "‚üª")
             ("for" . "‚àÄ")
             ("!=" . "‚â†")
             ("==" . "Ôºù")
             (">=" . "‚â•")
             ("<=" . "‚â§")
             ("=" . "‚âù")))))
#+end_src

*** Tabs
    [[https://github.com/ema2159/centaur-tabs][Centaur Tabs]]
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :custom
    (centaur-tabs-set-icons t)
    (centaur-tabs-gray-out-icons 'buffer)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src
** Gestionnaire de versions
*** Activated Gestionnaire de version (Magit)
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src

** Compl√©tion (tout sauf code)
*** Activated COunsel ivy swiper
https://github.com/abo-abo/swiper
#+begin_quote
This repository contains:

Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Swiper, an Ivy-enhanced alternative to Isearch.
#+end_quote

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
  ("M-x" . counsel-M-x)
  ("C-x C-m" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-x c k" . counsel-yank-pop))

(use-package ivy
  :bind
  ("C-x s" . swiper)
  ("C-x C-r" . ivy-resume)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers nil)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

(use-package smex)

(use-package all-the-icons-ivy)

#+END_SRC


*** compl√©tion des commandes
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :custom
  (which-key-idle-secondary-delay 0.01)
  (which-key-dont-use-unicode t)
  :config
  (which-key-mode t))
#+end_src

** D√©placements entre buffers
*** Activated windmove
#+begin_src emacs-lisp
(use-package windmove
  :bind
  ("C-x <up>" . windmove-up)
  ("C-x <down>" . windmove-down)
  ("C-x <left>" . windmove-left)
  ("C-x <right>" . windmove-right))
#+end_src
** Orthographe
Fly Spell

#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :defer t
  :hook (prog-mode text-mode org-mode)
)
#+end_src

Afin de pouvoir changer de langue facilement, j'ai trouv√© la fonction
suivante :
#+begin_src emacs-lisp
    (let ((langs '("francais" "english")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))

    (defun cycle-ispell-languages ()
      (interactive)
      (let ((lang (ring-ref lang-ring -1)))
        (ring-insert lang-ring lang)
        (ispell-change-dictionary lang)))

    (global-set-key [f6] 'cycle-ispell-languages)
#+end_src

Il faut installer aspell ainsi que le dictionnaire fran√ßais.

#+BEGIN_SRC bash :tangle install.sh
sudo apt install aspell aspell-fr
#+END_SRC

Pour appliquer la correction, deux solutions me paraissent valables :
- Via Ivy
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+end_src

- Via popup
#+begin_src emacs-lisp :tangle no
(use-package flyspell-correct-popup
  :bind ("C-;" . flyspell-correct-wrapper)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-popup))
#+end_src

** snipets
*** Activated  yasSnipets
     yasnippet permet d'ajouter des blocs de codes pr√©d√©finis.
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src
     adding a collection of snippets
#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src
** Parenth√®ses
   Automatisation autour des parenth√®ses
   https://github.com/Fuco1/smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src
Highlight parents
#+begin_src emacs-lisp
(use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
** Org-mode
   https://orgmode.org/worg/org-tutorials/org4beginners.html
   J'ai trouv√© un site avec une config sympa :
   https://jamiecollinson.com/blog/my-emacs-config/#org

**** Activated Package org
     ici, fontify et act natively servent √† utiliser le mode majeur
     correspondant dans les blocs source.
 #+begin_src emacs-lisp
   (use-package org
     :config
     (setq org-src-fontify-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-startup-folded 'overview)
     :custom
     (org-startup-indented t)
   )
 #+end_src
*** inline pdf images
 #+begin_src emacs-lisp
 (use-package org-inline-pdf)
 (add-hook 'org-mode-hook #'org-inline-pdf-mode)
 #+end_src
*** Blocs source (babel)

**** Desactivated python3 par d√©faut
 #+begin_src emacs-lisp :tangle no
   (setq org-babel-python-command "python3")
 #+end_src
**** Desactivated package babel ipython
 Afin de pouvoir g√©rer ipython, il faut installer le package org-babel
 ipython. On en profite pour utiliser python3 par d√©faut.
 #+begin_src emacs-lisp :tangle no
   (use-package ob-ipython
     :after org)
 #+end_src
**** Activated package jupyter
 https://github.com/nnicandro/emacs-jupyter
 #+begin_src emacs-lisp
   (use-package jupyter
     :after org
   )
 #+end_src
**** Activated Liste des languages activ√©s
 Ajout du support de certains languages dans org-babel
 #+begin_src emacs-lisp
   (with-eval-after-load 'org
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        ;;(ipython . t)
        (python  . t)
        (jupyter . t)
        (shell   . t)
      ))
       (setq org-confirm-babel-evaluate nil)
       (setq org-src-fontify-natively t)
       (setq org-src-tab-acts-natively t)
   )
   (org-babel-jupyter-override-src-block "python")
 #+end_src
**** Activated Affichage des images g√©n√©r√©es par d√©fault
 Toujours afficher les images apr√®s les avoir g√©n√©r√©es:

 #+begin_src emacs-lisp
 (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
 #+end_src

**** LSP-mode dans les blocs de code source babel
 https://emacs-lsp.github.io/lsp-mode/manual-language-docs/lsp-org/
*** Apparence
**** Activated SUPERSTAR
 Permet d'afficher des symboles utf-8 plut√¥t que des ast√©risques.
 #+begin_src emacs-lisp
   (use-package org-superstar
     :after org
     :hook (org-mode . org-superstar-mode)
     ;;:custom
     ;;(org-superstar-headline-bullets-list '("‚åæ" "‚óà" "‚ö¨" "‚ñ∑"))
     )
 #+end_src

*** Gestion r√©f√©rences et citations
**** Activated Org-ref
 Comme j'utilise Ivy et non Helm, le paquet /ivy-bibtex/ est
 n√©cessaire.

 J'utilise une bibliographie centralis√©e, que l'on va indiquer √†
 /Org-ref/.


 #+begin_src emacs-lisp
   (use-package ivy-bibtex)

   (use-package org-ref
     :after org
     :init
     (setq reftex-default-bibliography '("~/bibliography/library.bib"))
     (setq org-ref-default-bibliography '("~/bibliography/library.bib"))
     (setq org-ref-pdf-directory '("~/bibliography/pdfs"))
     (setq bibtex-completion-pdf-open-function 'org-open-file)
     (setq org-ref-completion-library 'org-ref-ivy-cite)
     )
 #+end_src

 Il reste √† modifier le processus d'exportation,

*** Export vers diff√©rents formats
 Liste des exporteurs : https://orgmode.org/worg/exporters/index.html
**** Activated correction probl√®me export _
 piste: TeX-like syntax for sub- and superscripts. If
 you write ‚Äò^:{}‚Äô, ‚Äòa_{b}‚Äô is interpreted, but the simple ‚Äòa_b‚Äô is left
 as it is (org-export-with-sub-superscripts).

 #+begin_src emacs-lisp
 (setq org-export-with-sub-superscripts '{})
 #+end_src
**** Pandoc, multi format

      We need to install last version of pandoc from https://github.com/jgm/pandoc/releases/
 #+begin_src bash :tangle install.sh
 sudo apt install pandoc
 #+end_src

      https://github.com/kawabata/ox-pandoc

      Activation de l'exporteur pandoc
 #+begin_src emacs-lisp
 (use-package ox-pandoc)
 #+end_src
**** HTML
***** Activated HTMLIZE
 #+begin_src emacs-lisp
 (use-package htmlize)
 (defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
   (rainbow-delimiters-mode -1)
   ad-do-it
   (rainbow-delimiters-mode t))

 (defun ome-htmlize-setup ()
   (if (el-get-read-package-status 'rainbow-delimiters)
       (progn
         (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
         (ad-activate 'htmlize-buffer-1))))
 #+end_src
***** Activated readthedocs theme
 https://github.com/fniessen/org-html-themes
 To use this, just add the following in your .org file
 #+begin_src emacs-lisp :tangle no
 #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
 #+end_src
 Then export it with standart latex exporter
 #+begin_src emacs-lisp :tangle no
 C-c C-e h h
 #+end_src

***** Activated Background color
  #+begin_src emacs-lisp
    (defun my/org-inline-css-hook (exporter)
      "Insert custom inline css to automatically set the
    background of code to whatever theme I'm using's background"

      (let* ((my-pre-bg (face-background 'default))
             (my-pre-fg (face-foreground 'default)))
	(setq
         org-html-head-extra
         (concat
          org-html-head-extra
          (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
                  my-pre-bg my-pre-fg)))))

    (add-hook 'org-export-before-processing-hook 'my/org-inline-css-hook)
  #+end_src
***** Embed images
 Il est possible d'embarquer les images directement dans le fichier
 HTML, ce qui peut s'av√©rer pratique pour partager le document produit.
 #+begin_src emacs-lisp
 (defun replace-in-string (what with in)
   (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

 (defun format-image-inline (source attributes info)
   (progn
     (setq source (replace-in-string "%20" " " source))
     (format "<img src=\"data:image/%s;base64,%s\"%s />"
             (or (file-name-extension source) "")
             (base64-encode-string
              (with-temp-buffer
		(insert-file-contents-literally source)
               (buffer-string)))
             (file-name-nondirectory source))
     ))
 ;;(defun format-image-inline (source attributes info)
 ;;  (let* ((ext (file-name-extension source))
 ;;         (prefix (if (string= "svg" ext) "data:image/svg+xml;base64," "data:;base64,"))
 ;;         (data (with-temp-buffer (url-insert-file-contents source) (buffer-string)))
 ;;         (data-url (concat prefix (base64-encode-string data)))
 ;;         (attributes (org-combine-plists `(:src ,data-url) attributes)))
 ;;    (org-html-close-tag "img" (org-html--make-attribute-string attributes) info)))

 (defun org-html-export-to-mhtml (async subtree visible body)
   (cl-letf (((symbol-function 'org-html--format-image) 'format-image-inline))
     (org-html-export-to-html nil subtree visible body)))

 (org-export-define-derived-backend 'html-inline-images 'html
   :menu-entry '(?h "Export to HTML" ((?m "As MHTML file and open" org-html-export-to-mhtml))))
 #+end_src
**** Desactivated Export Latex

 #+begin_src emacs-lisp :tangle no
   (use-package ox-latex
     :ensure nil
     :init
     (setq org-latex-compiler "xelatex")
     (setq org-latex-compilers '("xelatex" "pdflatex" "lualatex"))
     (setq org-latex-pdf-process (list "latexmk -xelatex -shell-escape -interaction=nonstopmode -f %f"))
     :config
     (add-to-list 'org-latex-packages-alist '("" "xcolor"))
     ;;(add-to-list 'org-latex-packages-alist '("" "mdframed"))
     (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
     (add-to-list 'org-latex-packages-alist '("" "mathtools"))
     (add-to-list 'org-latex-packages-alist '("" "amsfonts"))
     (add-to-list 'org-latex-packages-alist '("" "amssymb"))
     (add-to-list 'org-latex-packages-alist '("" "amsmath"))
     (add-to-list 'org-latex-packages-alist '("" "amsthm"))
     (add-to-list 'org-latex-packages-alist '("" "fontspec"))
     (add-to-list 'org-latex-packages-alist '("" "graphicx"))
     (add-to-list 'org-latex-packages-alist '("" "caption"))
     (add-to-list 'org-latex-packages-alist '("" "breakcites"))

     ;; outputdir=build
     (setq org-latex-prefer-user-labels t)
     (setq org-latex-listings 'minted)
     (setq org-latex-minted-options '(("bgcolor" "bg")))
     (add-to-list 'org-latex-minted-langs '(python "python"))
     )
 #+end_src

 options minted int√©ressantes :
 - mathescape :: latex math mode pour les commentaires
 - autogobble :: Remove (gobble) all common leading whitespace from
   code.
 - breaklines, breakafter 80 :: Break lines after specified characters,
   not just at spaces, whenbreaklines=true
***** Ajout de classes

****** Article
 Cr√©ation d'une classe simple :
 #+begin_src emacs-lisp
   (with-eval-after-load 'ox-latex
     (add-to-list 'org-latex-classes
                  '("base"
                    "\\documentclass{article}
   [PACKAGES]
   \\usemintedstyle{native}
   \\definecolor{bg}{HTML}{202020}
   \\setmonofont[Contextuals={Alternate}]{Fira Code}
   %\\usemintedstyle{material}
   %\\definecolor{bg}{HTML}{263238}
   %\\surroundwithmdframed{minted}
   [EXTRA]"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
 #+end_src
****** Thesul
 Cr√©ation d'une classe thesul :
 #+begin_src emacs-lisp
   (with-eval-after-load 'ox-latex
     (add-to-list 'org-latex-classes
                  '("thesul"
                    "\\documentclass{thesul}
   [NO-DEFAULT-PACKAGES]
   [PACKAGES]
   \\definecolor{bg}{HTML}{202020}
   \\definecolor{b}{HTML}{1E90FF}
   \\definecolor{o}{HTML}{ffa91e}
   \\definecolor{r}{HTML}{ff381e}
   \\definecolor{aubergine}{HTML}{370028}
   \\definecolor{citeblue}{HTML}{0d5fb8}

   %\\usepackage[xelatex]{tulhypref}
   \\usepackage{tulhypref}
   \\usepackage{pdfpages}
   \\hypersetup{
     colorlinks = true,
     linkcolor = {citeblue},
     citecolor = {citeblue},
     urlcolor = {o}
   }
   \\usepackage[french]{minitoc}
   %\\mtcsetdepth{1}
   %\\mtcsettitle{minitoc}{Sommaire}
   %\\mtcsetrules{minitoc}{off}
   \\usemintedstyle{native}
   \\usepackage{tikz}
   \\setmonofont[Contextuals={Alternate}]{Fira Code}
   \\usepackage{pifont}
   \\usepackage{ccicons}
   \\usepackage{gensymb}
   \\newcommand{\\xmark}{\\ding{55}}
   %\\usemintedstyle{material}
   %\\definecolor{bg}{HTML}{263238}
   %\\surroundwithmdframed{minted}
   "
                    ("\\chapter{%s}" . "\\chapter{%s}")
                    ("\\section{%s}" . "\\section{%s}")
                    ("\\subsection{%s}" . "\\subsection{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
 #+end_src
****** yathesis
 #+begin_src emacs-lisp
   (with-eval-after-load 'ox-latex
     (add-to-list 'org-latex-classes
                  '("yathesis"
                    "\\documentclass{yathesis}
   [PACKAGES]
   \\usemintedstyle{native}
   \\definecolor{bg}{HTML}{202020}
   %\\usemintedstyle{material}
   %\\definecolor{bg}{HTML}{263238}
   %\\surroundwithmdframed{minted}
   [EXTRA]"
                    ("\chapter{%s}" . "\chapter{%s}")
                    ("\section{%s}" . "\section{%s}")
                    ("\subsection{%s}" . "\subsection{%s}")
                    ("\subsubsection{%s}" . "\subsubsection{%s}")
                    ("\paragraph{%s}" . "\paragraph*{%s}"))))
 #+end_src
 Cr√©ation de fichiers de setup:
 #+begin_src org :tangle ./article-latex.setup
 # -*- mode: org; -*-
 #+LaTeX_CLASS: org-plain-latex
 #+LaTeX_CLASS_OPTIONS: [letter]
 #+LATEX_HEADER: \usepackage{lmodern} % Ensures we have the right font

 #+LATEX_HEADER: \usepackage[utf8]{inputenc}
 #+LATEX_HEADER: \usepackage[T1]{fontenc}
 #+LATEX_HEADER: \usepackage{babel}
 #+LATEX_HEADER: \usepackage{graphicx}
 #+LATEX_HEADER: \usepackage{amsmath, amsthm, amssymb}
 #+LATEX_HEADER: \usepackage[table, xcdraw]{xcolor}
 #+LATEX_HEADER: \usepackage[hidelinks]{hyperref}
 #+LATEX_HEADER: \usepackage{framed}
 #+LATEX_HEADER: \usepackage{minted}
 #+LATEX_HEADER: \usemintedstyle{pastie}
 #+end_src
***** Nettoyage apr√®s compilation
 #+begin_src emacs-lisp
 (setq org-latex-logfiles-extensions (quote ("lol" "flg" "lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle")))
 (setq org-latex-remove-logfiles t)
 #+end_src
***** Testing Coloration Syntaxique
 # (add-to-list 'org-latex-packages-alist '("" "xcolor"))
 # (add-to-list 'org-latex-packages-alist '("" "minted"))
 #+begin_src emacs-lisp :tangle no
   (setq org-latex-listings 'minted)
 #+end_src

 #+begin_src emacs-lisp :tangle no
   (setq org-latex-header-extra
         '(concat
           org-latex-header-extra
           "\\usemintedstyle{native}"))
 #+end_src

**** Diapositives
***** Futur Reveal js
       https://github.com/hakimel/reveal.js/
       To install reveal js locally :
       #+begin_src bash :tangle no
       cd ~/
       git clone https://github.com/hakimel/reveal.js/
       npm update node-sass
       npm install
       #+end_src
       as stated in https://github.com/yjwen/org-reveal: The easiest
       way of getint org-reveal is to instal ox-reveal from melpa
 #+begin_src emacs-lisp :tangle no
 (use-package ox-reveal)
 (setq org-reveal-root "file:///home/virgile/reveal.js")
 (use-package htmlize)
 #+end_src

**** Activated Github Markdown
 #+begin_src emacs-lisp
   (use-package ox-gfm
     :after org)
 #+end_src

*** Tangle

 #+begin_src emacs-lisp
 ;;; noweb expansion only when you tangle
 (setq org-babel-default-header-args
       (cons '(:noweb . "tangle")
             (assq-delete-all :noweb org-babel-default-header-args))
       )
 #+end_src






** Language Server Protocol

Installation cot√© emacs :
https://emacs-lsp.github.io/lsp-mode/page/installation/

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (python-mode . lsp)
           (rust-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)

  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+end_src

*** Backends languages
**** Python
Installation de la backend python
https://github.com/python-lsp/python-lsp-server
#+begin_src bash :tangle install.sh
  pip install python-lsp-server[all] pyls-mypy pyls-memestra
#+end_src

#+begin_src bash :tangle install.sh
sudo apt install libjansson-dev
#+end_src

**** Rust
[[https://github.com/rust-lang/rust-analyzer][Rust Analyser]]
#+begin_src emacs-lisp
(use-package rustic)
#+end_src
* Pas trait√©
** Language Server Protocol

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map)))
#+end_src
Installation cot√© emacs :
https://emacs-lsp.github.io/lsp-mode/page/installation/

#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)

;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

#+end_src

*** Testing Anaconda mode
Le mode Anaconda est para√Æt-il plus complet que le mode int√©gr√© :
#+begin_src emacs-lisp :tangle no
    (use-package anaconda-mode
      :hook
      (python-mode . anaconda-mode)
      (python-mode . anaconda-eldoc-mode))
#+end_src
#+begin_src bash :tangle install.sh
sudo pip install pyflakes pep8
#+end_src
Pour ce d√©barasser des probl√®mes d'indentations mixte et r√©gler
l'indentation a 4 espace:
https://www.emacswiki.org/emacs/NoTabs
#+begin_src emacs-lisp
(add-hook 'python-mode-hook (lambda () (setq python-indent-offset 4)))
(setq-default indent-tabs-mode nil)  ; use only spaces and no tabs
#+end_src


*** Futur Auto Format on save
https://github.com/paetzke/py-autopep8.el
#+begin_src emacs-lisp :tangle no
  (use-package py-autopep8)
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
#+end_src
** JSON
*** Activated Json mode
#+begin_src emacs-lisp
(use-package json-mode)
#+end_src
