#+TITLE: Ma configuration Emacs
#+HTML_HEAD_EXTRA: <style>pre { background-color: #282c34 ; color: #bbc2cf }</style>
* Config ShortCut
#+begin_src emacs-lisp :tangle yes
 (defun find-config ()
    "Edit init.org"
    (interactive)
    (find-file "~/.emacs.d/init.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src
* Base
Initialisation des dépots d'archives et installation de use-package.
#+begin_src emacs-lisp :tangle yes
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/")
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))

(when (not package-archive-contents)
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src
Gestion des backups :
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src
Désactiver le startup screen :
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+end_src
Tout passer en utf-8
#+begin_src emacs-lisp :tangle yes
;; Core settings
;; UTF-8 please
(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)   ; pretty
(set-terminal-coding-system  'utf-8)   ; pretty
(set-keyboard-coding-system  'utf-8)   ; pretty
(set-selection-coding-system 'utf-8)   ; please
(prefer-coding-system        'utf-8)   ; with sugar on top
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src
Enlever les barres de menu et d'outils, c'est un minimum :
#+begin_src emacs-lisp :tangle yes
;; Disable toolbar & menubar
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (  fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

Montrer les paires de parenthèses : https://www.emacswiki.org/emacs/ShowParenMode
#+begin_src emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

Désactiver le curseur dans les fenetres non-actives:
#+begin_src emacs-lisp :tangle yes
(setq-default cursor-in-non-selected-windows 'hollow)
#+end_src
Suppression des espaces en fin de fichier avant de sauvegarder :
#+begin_src emacs-lisp :tangle yes
;; Delete trailing whitespace before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Theme
Le site https://peach-melpa.org/ propose une galerie des themes Emacs disponibles sur MELPA.
** Actuel
J'ai trouvé le thème doom-one vraiment sympa.
#+begin_src emacs-lisp :tangle yes
    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

    (use-package doom-themes
      :defer t
      :init
      (load-theme 'doom-one t)
      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      (doom-themes-org-config))
#+end_src

** A tester :
*** Mood-one

Inspiré de doom-one, il ne necéssite pas de dépendances. En revanche la repo est
    peut-être moins active. https://gitlab.com/jessieh/mood-one-theme
*** Night owl
    https://github.com/aaronjensen/night-owl-emacs
*** SubAtomic
    https://peach-melpa.org/themes/subatomic-theme/variants/subatomic?lang=rb
** Compléments
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src
** Fonts
#+begin_src emacs-lisp :tangle yes
;;(set-frame-font "Operator Mono 12" nil t)
(set-fontset-font t 'unicode "STIXGeneral" nil 'prepend)
#+end_src
** pretty symbols
#+begin_src emacs-lisp :tangle yes
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (global-prettify-symbols-mode 1)
  (setq-default prettify-symbols-alist '(("#+BEGIN_SRC" . "†")
                                       ("#+END_SRC" . "†")
                                       ("#+begin_src" . "†")
                                       ("#+end_src" . "†")
                                       (">=" . "≥")
                                       ("=>" . "⇨")
                                       ("def" . "𝒇")
                                       ("class" . "𝑪")
                                       ("and" . "∧")
                                       ("or" . "∨")
                                       ("not" . "￢")
                                       ("in" . "∈")
                                       ("not in" . "∉")
                                       ("return" . "⟼")
                                       ("yield" . "⟻")
                                       ("for" . "∀")
                                       ("!=" . "≠")
                                       ("==" . "＝")
                                       (">=" . "≥")
                                       ("<=" . "≤")))


  (add-hook 'org-mode-hook 'prettify-symbols-mode)
  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(("def" . "𝒇")
             ("class" . "𝑪")
             ("and" . "∧")
             ("or" . "∨")
             ("not" . "￢")
             ("in" . "∈")
             ("not in" . "∉")
             ("return" . "⟼")
             ("yield" . "⟻")
             ("for" . "∀")
             ("!=" . "≠")
             ("==" . "＝")
             (">=" . "≥")
             ("<=" . "≤")
             ("=" . "≝")))))
#+end_src
* Packages
** Completion
*** Text
**** Company https://company-mode.github.io/
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :init
       ;; No delay in showing suggestions.
       (setq company-idle-delay 0)
       ;; Show suggestions after entering one character.
       (setq company-minimum-prefix-length 1)
       (setq company-selection-wrap-around t)
       ;; Use tab key to cycle through suggestions.
       ;; ('tng' means 'tab and go')
       (company-tng-configure-default)
       :config
       (add-hook 'after-init-hook 'global-company-mode))
   #+end_src
   ajout d'une pop-up avec Company quickhelp
   https://github.com/expez/company-quickhelp
   #+begin_src emacs-lisp :tangle yes
     (use-package company-quickhelp
       :config
       (company-quickhelp-mode 1))
   #+end_src
**** Backends company
    Liste des backends :
    https://github.com/company-mode/company-mode/wiki/Third-Party-Packages
    backends selectionées:
    - Pour les symboles de Maths : https://github.com/vspinu/company-math
      #+begin_src emacs-lisp :tangle yes
      ;; global activation of the unicode symbol completion
      (add-to-list 'company-backends 'company-math-symbols-unicode)
      #+end_src
      If you are using AUCTeX you might need to use TeX-mode-hook instead:
      (add-hook 'TeX-mode-hook 'my-latex-mode-setup)
    - Latex : https://github.com/alexeyr/company-auctex/

    - Python
      #+begin_src emacs-lisp :tangle yes
      (eval-after-load "company"
        '(add-to-list 'company-backends 'company-anaconda))
      #+end_src
*** yasSnipets
     yasnippet permet d'ajouter des blocs de codes prédéfinis.
     #+begin_src emacs-lisp :tangle yes
       (use-package yasnippet
	 :config
	 (yas-global-mode 1))
#+end_src
     adding a collection of snippets
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets)
#+end_src
Ajout de snippets personalisés:

** Org
   https://orgmode.org/worg/org-tutorials/org4beginners.html
*** ajout d'org-mode et quelques config
    J'ai trouvé un site avec une config sympa :
    https://jamiecollinson.com/blog/my-emacs-config/#org


ici, fontify et act natively servent à utiliser le mode majeur
correspondant dans les blocs source.
#+begin_src emacs-lisp :tangle yes
(use-package org
  :config
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
)
#+end_src

*** Blocs source

Afin de pouvoir gérer ipython, il faut installer le package org-babel ipython
#+begin_src emacs-lisp :tangle yes
(use-package ob-ipython)
#+end_src

ajout du support de certains languages dans org-babel
#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (ipython . t)
     (python  . t)
     (C       . t)
     (dot     . t)
     (shell   . t)
   ))
    (setq org-confirm-babel-evaluate nil)
)
#+end_src


#+RESULTS:

*** Apparence
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
      :ensure t
      :config
      ;; (setq org-bullets-bullet-list '("∙"))
      (add-hook 'org-mode-hook 'org-bullets-mode)
      )
#+end_src

*** Gestion references et citations
#+begin_src emacs-lisp :tangle yes
(use-package org-ref)

(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+end_src

*** Export
Liste des exporteurs : https://orgmode.org/worg/exporters/index.html

**** Pandoc, multi format
     https://github.com/kawabata/ox-pandoc
     We need to install last version of pandoc from https://github.com/jgm/pandoc/releases/
#+begin_src emacs-lisp :tangle yes
(use-package ox-pandoc)
#+end_src
**** Blog
     https://melpa.org/#/ox-hugo
**** Export HTML

https://github.com/fniessen/org-html-themes


#+begin_src emacs-lisp :tangle yes
(use-package ox-twbs
    :ensure t)
#+end_src
**** Slides
***** Ioslides
     IOslide, joli et minimaliste
     https://github.com/coldnew/org-ioslide
     #+begin_src emacs-lisp :tangle yes
(use-package ox-ioslide)
;;(use-package ox-ioslide-helper)
     #+end_src
***** Html5slide
      html5slide, pas de maj depuis 6ans, on oublie :
      https://github.com/coldnew/org-html5slide
***** Reveal js
      https://github.com/hakimel/reveal.js/
      To install reveal js locally :
      #+begin_src bash
      cd ~/
      git clone https://github.com/hakimel/reveal.js/
      npm update node-sass
      npm install
      #+end_src
      as stated in https://github.com/yjwen/org-reveal: The easiest
      way of getint org-reveal is to instal ox-reveal from melpa
#+begin_src emacs-lisp :tangle yes
(use-package ox-reveal)
(setq org-reveal-root "file:///home/virgile/reveal.js")
(use-package htmlize)
#+end_src

#+RESULTS:

to come arount rainbow delimiter incompatibility issues :
#+begin_src emacs-lisp :tangle yes
(defadvice htmlize-buffer-1 (around ome-htmlize-buffer-1 disable)
  (rainbow-delimiters-mode -1)
  ad-do-it
  (rainbow-delimiters-mode t))

(defun ome-htmlize-setup ()
  (if (el-get-read-package-status 'rainbow-delimiters)
      (progn
        (ad-enable-advice 'htmlize-buffer-1 'around 'ome-htmlize-buffer-1)
        (ad-activate 'htmlize-buffer-1))))
#+end_src
***** Beamer
#+begin_src emacs-lisp :tangle no
(use-package ox-beamer)
#+end_src

*** Tangle
#+begin_src emacs-lisp :tangle yes
;;; noweb expansion only when you tangle
(setq org-babel-default-header-args
      (cons '(:noweb . "tangle")
            (assq-delete-all :noweb org-babel-default-header-args))
      )
#+end_src

** Writegood mode : besoin de tests
#+begin_src emacs-lisp :tangle no
(use-package writegood-mode
    :ensure t
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+end_src
** Dashboard
https://github.com/emacs-dashboard/emacs-dashboard
An extensible emacs startup screen showing you what’s most important.
install page-break-lines as it is required for dashboard.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package page-break-lines)
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** popup
popup.el is a visual popup user interface library for Emacs. This
provides a basic API and common UI widgets such as popup tooltips
and popup menus.
#+begin_src emacs-lisp :tangle yes
(use-package popup)
#+end_src

** COunsel ivy swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :bind
  ("M-x" . counsel-M-x)
  ("C-x C-m" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-x c k" . counsel-yank-pop))

(use-package counsel-projectile
  :bind
  ("C-x v" . counsel-projectile)
  ("C-x c p" . counsel-projectile-ag)
  :config
  (counsel-projectile-on))

(use-package ivy
  :bind
  ("C-x s" . swiper)
  ("C-x C-r" . ivy-resume)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers nil)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

(use-package smex)

(use-package all-the-icons-ivy)

#+END_SRC
** Line number
#+BEGIN_SRC emacs-lisp :tangle no
(use-package hlinum
  :config
  (hlinum-activate))

(use-package linum
  :config
  (setq linum-format " %3d ")
  (global-linum-mode nil))
#+END_SRC
** Gestion projets
#+begin_src emacs-lisp :tangle no
(use-package projectile
  :config
  (setq projectile-known-projects-file
        (expand-file-name "projectile-bookmarks.eld" temp-dir))

  (setq projectile-completion-system 'ivy)

  (projectile-global-mode))
#+end_src

** Déplacements entre buffers
#+begin_src emacs-lisp :tangle yes
(use-package windmove
  :bind
  ("C-x <up>" . windmove-up)
  ("C-x <down>" . windmove-down)
  ("C-x <left>" . windmove-left)
  ("C-x <right>" . windmove-right))
#+end_src
** Next key
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (add-hook 'after-init-hook 'which-key-mode))
#+end_src
** Expend selected region
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src

** Parenthèses et autres
   Automatisation autour des parenthèses
   https://github.com/Fuco1/smartparens
#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src
Highlight parents
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
expend parents redondant avec smartparens ?
#+begin_src emacs-lisp :tangle no
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src

** Move text
#+begin_src emacs-lisp :tangle yes
(use-package move-text)
#+end_src

#+RESULTS:
** Indentation
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
      :ensure t)
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+end_src

#+RESULTS:
| html-mode | bibtex-mode | cider-repl-mode | coffee-mode | comint-mode | conf-mode | Custom-mode | diff-mode | doc-view-mode | dos-mode | erc-mode | feature-mode | fortran-mode | f90-mode | jabber-chat-mode | haml-mode | haskell-mode | haskell-interactive-mode | image-mode | inf-ruby-mode | makefile-mode | makefile-gmake-mode | minibuffer-inactive-mode | netcmd-mode | python-mode | sass-mode | scala-mode | slim-mode | special-mode | shell-mode | snippet-mode | eshell-mode | tabulated-list-mode | term-mode | TeX-output-mode | text-mode | yaml-mode |

aggressive indent ne fonctionne pas avec python, on peut l'activer,
mais cela ne fonctionne pas super bien. J'ai donc retiré le code
suivant de ma config.
#+begin_src emacs-lisp :tangle no
  (add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))
  (setq aggressive-indent-excluded-modes
	(remove 'python-mode aggressive-indent-excluded-modes))
#+end_src

#+RESULTS:
| html-mode | bibtex-mode | cider-repl-mode | coffee-mode | comint-mode | conf-mode | Custom-mode | diff-mode | doc-view-mode | dos-mode | erc-mode | feature-mode | fortran-mode | f90-mode | jabber-chat-mode | haml-mode | haskell-mode | haskell-interactive-mode | image-mode | inf-ruby-mode | makefile-mode | makefile-gmake-mode | minibuffer-inactive-mode | netcmd-mode | sass-mode | scala-mode | slim-mode | special-mode | shell-mode | snippet-mode | eshell-mode | tabulated-list-mode | term-mode | TeX-output-mode | text-mode | yaml-mode |

** magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src
** Syntaxe (Flycheck)
J'utilise flycheck pour vérifier la syntaxe à la volée
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src

** Orthographe (Fly Spell)

#+begin_src emacs-lisp :tangle yes
(use-package flyspell)
(define-key flyspell-mode-map (kbd "C-;") #'flyspell-correct-wrapper)
#+end_src

On veut l'activer sur org et Latex :
#+begin_src emacs-lisp :tangle yes

(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)

#+end_src
Afin de pouvoir changer de langue facilement, j'ai trouvé la fonction
suivante :
#+begin_src emacs-lisp :tangle yes
    (let ((langs '("english" "francais")))
      (setq lang-ring (make-ring (length langs)))
      (dolist (elem langs) (ring-insert lang-ring elem)))

    (defun cycle-ispell-languages ()
      (interactive)
      (let ((lang (ring-ref lang-ring -1)))
        (ring-insert lang-ring lang)
        (ispell-change-dictionary lang)))

    (global-set-key [f6] 'cycle-ispell-languages)
#+end_src

Il faut installer aspell ainsi que le dictionnaire français.

#+BEGIN_SRC bash :tangle install.sh
sudo apt install aspell aspell-fr
#+END_SRC

Pour appliquer la correction, deux solutions me paraissent valables :
- Via Ivy
#+begin_src emacs-lisp :tangle yes
(use-package flyspell-correct-ivy
  :bind ("C-;" . flyspell-correct-wrapper)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-ivy))
#+end_src

- Via popup
#+begin_src emacs-lisp :tangle no
(use-package flyspell-correct-popup
  :bind ("C-;" . flyspell-correct-wrapper)
  :init
  (setq flyspell-correct-interface #'flyspell-correct-popup))
#+end_src

** C/C++
   Le built in est bon, mais j'aimerai tester Irony
   https://github.com/Sarcasm/irony-mode
   #+begin_src emacs-lisp :tangle yes
     (use-package irony
	 :ensure t
	 :hook
	 (c-mode . irony-mode)
	 (c++-mode . irony-mode)
	 (irony-mode . irony-cdb-autosetup-compile-options))
   #+end_src
Irony-Server prerequisites
irony-server provides the libclang interface to irony-mode. It uses a
simple protocol based on S-expression. This server, written in C++ and
requires the following packages to be installed on your system:

-CMake >= 2.8.3
-libclang

ajout du support de company
#+begin_src emacs-lisp :tangle yes
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+end_src
Ajout du support de flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+end_src
** Python
Le mode Anaconda est paraît-il plus complet que le mode intégré :
#+begin_src emacs-lisp :tangle yes
    (use-package anaconda-mode
      :hook
      (python-mode . anaconda-mode)
      (python-mode . anaconda-eldoc-mode))
#+end_src
#+begin_src bash :tangle install.sh
sudo pip install pyflakes pep8
#+end_src
Pour ce débarasser des problèmes d'indentations mixte et régler
l'indentation a 4 espace:
https://www.emacswiki.org/emacs/NoTabs
#+begin_src emacs-lisp :tangle no
(add-hook 'python-mode-hook (lambda () (setq python-indent-offset 4)))
(setq-default indent-tabs-mode nil)  ; use only spaces and no tabs
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-babel-python-command "python3")
#+end_src

live py est sympa mais uniquement pour des logiciels simples.
#+begin_src emacs-lisp :tangle no
(use-package live-py-mode)
#+end_src

*** Auto Format
#+begin_src emacs-lisp :tangle yes
  (use-package py-autopep8)
#+end_src
** External programs
#+begin_src emacs-lisp :tangle yes
(use-package openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
#+end_src
Spotify.el : je n'arrive pas à le faire fonctionner correctement
#+begin_src emacs-lisp :tangle no
  (use-package spotify
    :init
    (setq spotify-oauth2-client-secret "5c0f97fd58944fc7b825b1bb108de2b2")
    (setq spotify-oauth2-client-id "f614782caa124b179dab2e2a4b3ea0f0")
    (setq spotify-transport 'connect)
    :bind-keymap
    ("C-c ." . spotify-keymap-prefix)
  )
#+end_src

Counsel-spotify:
#+begin_src emacs-lisp :tangle no
  (use-package counsel-spotify
    :init
    (setq counsel-spotify-client-secret "5c0f97fd58944fc7b825b1bb108de2b2")
    (setq counsel-spotify-client-id "f614782caa124b179dab2e2a4b3ea0f0")
  )
#+end_src
** JSON
#+begin_src emacs-lisp :tangle yes
  (use-package json-navigator)
#+end_src
** Scimax Latex
#+begin_src emacs-lisp :tangle no
(use-package scimax-latex
  :straight (scimax-latex :type git
                          :host github
                          :repo "jkitchin/scimax"
                          :files ("scimax-latex.el"))
  :commands (scimax-latex-setup
             kpsewhich
             texdoc))
#+end_src

#+RESULTS:
