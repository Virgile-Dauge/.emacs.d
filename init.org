#+TITLE: Ma configuration Emacs
* Config ShortCut
#+begin_src emacs-lisp :tangle yes
 (defun find-config ()
    "Edit init.org"
    (interactive)
    (find-file "~/.emacs.d/init.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src
* Base
Initialisation des d√©pots d'archives et installation de use-package.
#+begin_src emacs-lisp :tangle yes
(package-initialize)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/")
             '("elpy" . "http://jorgenschaefer.github.io/packages/"))

(when (not package-archive-contents)
  (package-refresh-contents))
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src
Gestion des backups :
#+begin_src emacs-lisp :tangle yes
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+end_src
D√©sactiver le startup screen :
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen t)
#+end_src
Tout passer en utf-8
#+begin_src emacs-lisp :tangle yes
;; Core settings
;; UTF-8 please
(set-charset-priority 'unicode)
(setq locale-coding-system   'utf-8)   ; pretty
(set-terminal-coding-system  'utf-8)   ; pretty
(set-keyboard-coding-system  'utf-8)   ; pretty
(set-selection-coding-system 'utf-8)   ; please
(prefer-coding-system        'utf-8)   ; with sugar on top
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+end_src
Enlever les barres de menu et d'outils, c'est un minimum :
#+begin_src emacs-lisp :tangle yes
;; Disable toolbar & menubar
(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (  fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+end_src

Montrer les paires de parenth√®ses : https://www.emacswiki.org/emacs/ShowParenMode
#+begin_src emacs-lisp :tangle yes
(setq show-paren-delay 0)
(show-paren-mode 1)
#+end_src

D√©sactiver le curseur dans les fenetres non-actives:
#+begin_src emacs-lisp :tangle yes
(setq-default cursor-in-non-selected-windows 'hollow)
#+end_src
Suppression des espaces en fin de fichier avant de sauvegarder :
#+begin_src emacs-lisp :tangle yes
;; Delete trailing whitespace before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Infos

* Theme
Le site https://peach-melpa.org/ propose une galerie des themes Emacs disponibles sur MELPA.
** Actuel
J'ai trouv√© le th√®me doom-one vraiment sympa.
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))

  (use-package doom-themes
    :defer t
    :init
    (load-theme 'doom-one t))
#+end_src

** A tester :
*** Mood-one

Inspir√© de doom-one, il ne nec√©ssite pas de d√©pendances. En revanche la repo est
    peut-√™tre moins active. https://gitlab.com/jessieh/mood-one-theme
*** Night owl
    https://github.com/aaronjensen/night-owl-emacs
*** SubAtomic
    https://peach-melpa.org/themes/subatomic-theme/variants/subatomic?lang=rb
** Compl√©ments
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons)
#+end_src
** Fonts
#+begin_src emacs-lisp :tangle yes
;;(set-frame-font "Operator Mono 12" nil t)
(set-fontset-font t 'unicode "STIXGeneral" nil 'prepend)
#+end_src
** pretty symbols
#+begin_src emacs-lisp :tangle yes
  (setq prettify-symbols-unprettify-at-point 'right-edge)
  (global-prettify-symbols-mode 0)

  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(("def" . "ùíá")
             ("class" . "ùë™")
             ("and" . "‚àß")
             ("or" . "‚à®")
             ("not" . "Ôø¢")
             ("in" . "‚àà")
             ("not in" . "‚àâ")
             ("return" . "‚üº")
             ("yield" . "‚üª")
             ("for" . "‚àÄ")
             ("!=" . "‚â†")
             ("==" . "Ôºù")
             (">=" . "‚â•")
             ("<=" . "‚â§")
             ("[]" . "‚Éû")
             ("=" . "‚âù")))))
#+end_src
* Packages
** Completion
*** Text
**** Company https://company-mode.github.io/
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :init
       ;; No delay in showing suggestions.
       (setq company-idle-delay 0)
       ;; Show suggestions after entering one character.
       (setq company-minimum-prefix-length 1)
       (setq company-selection-wrap-around t)
       ;; Use tab key to cycle through suggestions.
       ;; ('tng' means 'tab and go')
       (company-tng-configure-default)
       :config
       (add-hook 'after-init-hook 'global-company-mode))
   #+end_src
   ajout d'une pop-up avec Company quickhelp
   https://github.com/expez/company-quickhelp
   #+begin_src emacs-lisp :tangle yes
     (use-package company-quickhelp
       :config
       (company-quickhelp-mode 1))
   #+end_src
**** Backends company
    Liste des backends :
    https://github.com/company-mode/company-mode/wiki/Third-Party-Packages
    backends selection√©es :
    - Pour les symboles de Maths : https://github.com/vspinu/company-math
      #+begin_src emacs-lisp :tangle yes
      ;; global activation of the unicode symbol completion
      (add-to-list 'company-backends 'company-math-symbols-unicode)
      #+end_src
      If you are using AUCTeX you might need to use TeX-mode-hook instead:
      (add-hook 'TeX-mode-hook 'my-latex-mode-setup)
    - Latex : https://github.com/alexeyr/company-auctex/
*** yasSnipets
     yasnippet permet d'ajouter des blocs de codes pr√©d√©finis.
     #+begin_src emacs-lisp :tangle yes
       (use-package yasnippet
	 :config
	 (yas-global-mode 1))
#+end_src
adding a collection of snippets
#+begin_src emacs-lisp :tangle yes
(use-package yasnippet-snippets)
#+end_src

** Org
   https://orgmode.org/worg/org-tutorials/org4beginners.html
*** Org main
    J'ai trouv√© un site avec une config sympa :
    https://jamiecollinson.com/blog/my-emacs-config/#org
#+begin_src emacs-lisp :tangle yes
(use-package org
  :config
  (setq org-directory "~/org-files"
        org-default-notes-file (concat org-directory "/todo.org"))
  :bind
  ("C-c l" . org-store-link)
  ("C-c a" . org-agenda))
#+end_src
*** Apparence
#+begin_src emacs-lisp :tangle yes
(use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-bullet-list '("‚àô"))
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src
*** Ecriture
#+begin_src emacs-lisp :tangle yes
(use-package writegood-mode
    :ensure t
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+end_src
*** Export
Liste des exporteurs : https://orgmode.org/worg/exporters/index.html
**** Pandoc, multi format
     https://github.com/kawabata/ox-pandoc
     We need to install last version of pandoc from https://github.com/jgm/pandoc/releases/
#+begin_src emacs-lisp :tangle yes
(use-package ox-pandoc)
#+end_src
**** Blog
     https://melpa.org/#/ox-hugo
**** Export HTML

https://github.com/fniessen/org-html-themes


#+begin_src emacs-lisp :tangle yes
(use-package ox-twbs
    :ensure t)
#+end_src
**** Slides
     IOslide, joli et minimaliste
     https://github.com/coldnew/org-ioslide
     #+begin_src emacs-lisp :tangle yes
     (use-package ox-ioslide)
     #+end_src
     html5slide, pas de maj depuis 6ans, on oublie :
     https://github.com/coldnew/org-html5slide
** Dashboard
install page-break-lines as it is required for dashboard.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package page-break-lines)
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** COunsel ivy swiper
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel
  :bind
  ("M-x" . counsel-M-x)
  ("C-x C-m" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("C-x c k" . counsel-yank-pop))

(use-package counsel-projectile
  :bind
  ("C-x v" . counsel-projectile)
  ("C-x c p" . counsel-projectile-ag)
  :config
  (counsel-projectile-on))

(use-package ivy
  :bind
  ("C-x s" . swiper)
  ("C-x C-r" . ivy-resume)
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers nil)
  (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))

(use-package smex)

(use-package all-the-icons-ivy)

#+END_SRC
** Line number
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hlinum
  :config
  (hlinum-activate))

(use-package linum
  :config
  (setq linum-format " %3d ")
  (global-linum-mode nil))
#+END_SRC
** Gestion projets
#+begin_src emacs-lisp :tangle yes
(use-package projectile
  :config
  (setq projectile-known-projects-file
        (expand-file-name "projectile-bookmarks.eld" temp-dir))

  (setq projectile-completion-system 'ivy)

  (projectile-global-mode))
#+end_src

** D√©placements entre buffers
#+begin_src emacs-lisp :tangle yes
(use-package windmove
  :bind
  ("C-x <up>" . windmove-up)
  ("C-x <down>" . windmove-down)
  ("C-x <left>" . windmove-left)
  ("C-x <right>" . windmove-right))
#+end_src
** Next key
#+begin_src emacs-lisp :tangle ye
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (add-hook 'after-init-hook 'which-key-mode))
#+end_src
** Easier selection
#+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src
** Parenth√®ses et autres
   Automatisation autour des parenth√®ses
   https://github.com/Fuco1/smartparens
#+begin_src emacs-lisp :tangle yes
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src
Highlight parents
#+begin_src emacs-lisp :tangle yes
(use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src
expend parents redondant avec smartparens ?
#+begin_src emacs-lisp :tangle no
(add-hook 'prog-mode-hook 'electric-pair-mode)
#+end_src
** Indentation
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
      :ensure t)
#+end_src
** Git
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src
** Syntaxe
J'utilise flycheck pour v√©rifier la syntaxe √† la vol√©e
#+begin_src emacs-lisp :tangle yes
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+end_src
** C/C++
   Le built in est bon, mais j'aimerai tester Irony
   https://github.com/Sarcasm/irony-mode
   #+begin_src emacs-lisp :tangle yes
     (use-package irony
	 :ensure t
	 :hook
	 (c-mode . irony-mode)
	 (c++-mode . irony-mode)
	 (irony-mode . irony-cdb-autosetup-compile-options))
   #+end_src
Irony-Server prerequisites
irony-server provides the libclang interface to irony-mode. It uses a
simple protocol based on S-expression. This server, written in C++ and
requires the following packages to be installed on your system:

-CMake >= 2.8.3
-libclang

ajout du support de company
#+begin_src emacs-lisp :tangle yes
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+end_src
 Ajout du support de flycheck
#+begin_src emacs-lisp :tangle yes
(use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+end_src
